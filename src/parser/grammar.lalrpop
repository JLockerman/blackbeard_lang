use std::str::FromStr;
use crate::parser::ast::{
    BinOp,
    PrefixOp,
    Statement,
    Declaration,
    Type,
    Expression,
    Literal,
    Projection,
};

grammar;

pub Program: Vec<Statement> = (<Statement>)*;

pub Statement: Statement = {
    <var: (<Expression> "=")?> <expr: Expression> ";" =>
        crate::parser::ast::Statement::Assignment{var, expr},
    <Declaration> => Statement::Declaration(<>),
};

pub Declaration: Declaration = {
    "function" <name: Identifier> "(" <args: Comma<NameAndType>> ")"
        <returns: (":" <Type>)?> "{" <body: Program> "}" =>
            Declaration::Function{name, args, returns, body},
    "object" <name: Identifier> "{" <fields: Comma<NameAndType>> "}" =>
        Declaration::Object{name, fields},
};

NameAndType: (String, Type) = {
    <Identifier> ":" <Type> => (<>),
};

Type: Type = {
    "{}->" <base: Type> => Type::Pointer(base.into()),
    "[" <SliceType> "]",
    <base: Identifier> => Type::Named(base.into()),
};

SliceType: Type = {
    "..." <Type> => Type::Slice(<>.into()),
    "..?" <Type> => Type::UninitSlice(<>.into()),
    <length: ArrayLength> <ty: Type> => Type::Array(length, ty.into()),
}

pub Expression = <AddExpression>;

AddExpression: Expression = {
    ExpressionLevel<AddExpression, MulExpression, AddOp>,
}

MulExpression: Expression = {
    ExpressionLevel<MulExpression, PrefixExpression, MulOp>,
}

PrefixExpression: Expression = {
    <ops: PrefixOp*> <expr: EqExpression> => {
        let mut expr = expr;
        for op in ops {
            expr = Expression::Prefix(op, expr.into())
        }
        expr
    }
}

EqExpression: Expression = {
    ExpressionLevel<LogicExpression, LogicExpression, EqOp>,
}

LogicExpression: Expression = {
    ExpressionLevel<LogicExpression, PointerExpression, LogicOp>,
}

PointerExpression: Expression = {
    <pointer_to: "{}->"?> <src: FunctionExpression> <projections: Projection+> => {
        match pointer_to {
            None => Expression::Project(src.into(), projections),
            Some(..) => Expression::ProjectAndRef(src.into(), projections),
        }
    },
    <FunctionExpression>,
}

Projection: Projection = {
    "->{}" => Projection::Deref,
    "." <id: Identifier> =>  Projection::Field(id.into()),
    "->" <id: Identifier> => Projection::DerefField(id.into()),
    "->" "[" <index: Expression> "]" => Projection::DerefIndex(index.into()),
}

FunctionExpression: Expression = {
    <function: Identifier> "(" <args: Comma<Expression>> ")" =>
        Expression::Call{function, args},
    <Identifier> => Expression::Variable(<>),
    <Literal> => Expression::Literal(<>),
    "(" <Expression> ")",
};

#[inline]
AddOp: BinOp = {
    "+" => BinOp::Plus, "-" => BinOp::Minus,
}

#[inline]
MulOp: BinOp = {
    "*" => BinOp::Mul, "/" => BinOp::Div,
}

#[inline]
LogicOp: BinOp = {
    "and" => BinOp::And, "or" => BinOp::Or,
}

#[inline]
PrefixOp: PrefixOp = {
    "-" => PrefixOp::Neg, "not" => PrefixOp::Not,
}

#[inline]
EqOp: BinOp = {
    "==" => BinOp::Eq, "!=" => BinOp::Neq,
}

#[inline]
ExpressionLevel<L, R, Op>: Expression = {
    <left: L> <op: Op> <right: R> => Expression::Binary{
        op,
        left: left.into(),
        right: right.into(),
    },
    R,
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Literal: Literal = {
    <UnsignedInteger> => Literal::Integer(<>),
    <Float> => Literal::Float(<>),
}

Identifier: String = <identifier> => String::from_str(<>).unwrap();

UnsignedInteger: u128 = <integer> => u128::from_str(<>)
    .expect("invalid integer");

Float: f64 = <float> => f64::from_str(<>)
    .expect("invalid floating-point number");

ArrayLength: u64 = <integer> => u64::from_str(<>)
    .expect("invalid array length");

match {
    "{}->" => "{}->",
    "->{}" => "->{}",
    ":" => ":",
} else {
    ".",
    "->" => "->",
    r"//[^\n\r]*[\n\r]*" => {}, // Skip `// comments`
    "function",
    "object",
    "and",
    "or",
    "not",
    "(",
    ")",
    "{",
    "}",
    "[",
    "]",
    ",",
    ";",
    "...",
    "..?",
    "+",
    "-",
    "*",
    "/",
    "==",
    "!=",
} else {
    "=",
    r"\s*" => {},
    r"\d+\.\d+" => float,
    r"\d+" => integer,
    r"[[:alpha:]]\w*" => identifier,
}
